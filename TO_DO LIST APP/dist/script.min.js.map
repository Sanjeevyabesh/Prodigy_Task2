{"version":3,"sources":["script.js"],"names":["tasks","promptUser","action","prompt","addTask","filterTasks","document","getElementById","dateInput","alert","value","trim","timeInput","task","id","Date","now","text","taskInput","push","renderTasks","filter","arguments","length","undefined","innerHTML","completed","forEach","taskList","li","filteredTasks","date","appendChild","editTask","find","newText","newDate","newTime","map","_objectSpread","time","deleteTask"],"mappings":"wuBAAA,IAAIA,MAAQ,GAEZ,SAASC,aACL,IAAMC,EAASC,OAAO,sDACP,QAAXD,EACAE,UACkB,YAAXF,EACPG,YAAY,WAPpB,cAAAH,EASQG,YAAY,aANVH,MAAM,kEAGX,SAAME,UACHC,IAAAA,EAAYC,SAAZC,eAAA,aACGC,EAAUF,SAAKC,eAAa,aAC/BF,EAAYC,SAAZC,eAAA,aAEAE,GAAM,KAANA,EAAMC,MAAAC,QAAAH,EAAAE,OAAAE,EAAAF,MAAN,CACH,IAAAG,EAAA,CACJC,GAAAC,KAAAC,MAUWC,KAAMC,EAAUR,MARnBN,KAATI,EAAmBE,MACTQ,KAAYZ,EAASC,MACrBC,WAAYF,GAWdN,MAAMmB,KAAKN,GARXK,EAAUR,MAAV,GACMG,EAAOH,MAAA,GACPE,EAAEF,MADK,GAETO,eAFS,SAAbG,cAAA,IAAAC,EAAA,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,MAOMH,EAANb,SAAAC,eAAA,YACAW,EAASO,UAAT,GAEAzB,MAAAqB,OAAA,SAAAR,GACAO,MAAW,QAAXA,IACH,YAAAC,GAAAR,EAAAa,UACJ,cAAAL,EAAAR,EAAAa,eAAA,KAEoCC,QAAA,SAAAd,GAC3Be,IAAQC,EAAGvB,SAASC,cAAe,MACzCqB,EAASH,UAAYZ,EAArBa,UAAA,YAAA,GAEMI,EAAAA,UAAAA,uBAAAA,OACajB,EAAfI,KADEa,+BAAAA,OAEajB,EAAAkB,KAFbD,KAAAA,OAEwBjB,EAAQA,KAFhCiB,uFAAAA,OAANjB,EAAAC,GAAMgB,uFAAAA,OAMwBjB,EAAAC,GANxBgB,OAAAA,OAMwBjB,EAAAa,UAAA,OAAA,WANxBI,2DAAAA,OAOFjB,EAAAC,GAPEgB,oDAkBFF,EAASI,YAATH,KAIR,SAASI,SAASnB,GACd,IAAUD,EAAGb,MAAAkC,KAAW,SAAArB,GAAA,OAAAA,EAAIC,KAAAA,IAAAqB,EAAIhC,OAAJ,kBAAAU,EAAAI,MAA5BmB,EAAAjC,OAAA,iBAAAU,EAAAkB,MACMI,EAAUhC,OAAO,iBAAmBU,EAAKI,MAEzCoB,GAAUlC,GAAOkC,IAGnBrC,MAAQA,MAAMsC,IAAI,SAAAzB,GAAI,OAAIA,EAAKC,KAAOA,EAAZyB,cAAA,GAAsB1B,EAAtB,CAA4BI,KAAMkB,EAASJ,KAAMK,EAASI,KAAMH,IAAYxB,IADtGsB,eACqEJ,SAAAA,eAA3CjB,GAA0D0B,MAAIxC,MAAEqC,IAAAA,SAAAA,GAAAA,OAAAA,EAAAA,KAAAA,EAAAA,cAAAA,GAAAA,EAAAA,CAAAA,WAAAA,EAAAA,YAAAA,IAAhEjB,cAE7B,SAAAqB,WAAA3B,GACJd,MAAAA,MAAAqB,OAAA,SAAAR,GAAA,OAAAA,EAAAC,KAAAA,IASGM,cANsB,SAAAf,YAAIgB,GAA4BK,YAASL,GAElEpB","file":"script.min.js","sourcesContent":["let tasks = [];\r\n\r\nfunction promptUser() {\r\n    const action = prompt('What would you like to do? (new/pending/completed)');\r\n    if (action === 'new') {\r\n        addTask();\r\n    } else if (action === 'pending') {\r\n        filterTasks('pending');\r\n    } else if (action === 'completed') {\r\n        filterTasks('completed');\r\n    } else {\r\n        alert('Invalid option. Please enter \"new\", \"pending\", or \"completed\".');\r\n    }\r\n}\r\n\r\nfunction addTask() {\r\n    const taskInput = document.getElementById('taskInput');\r\n    const dateInput = document.getElementById('dateInput');\r\n    const timeInput = document.getElementById('timeInput');\r\n\r\n    if (taskInput.value.trim() !== '' && dateInput.value && timeInput.value) {\r\n        const task = {\r\n            id: Date.now(),\r\n            text: taskInput.value,\r\n            date: dateInput.value,\r\n            time: timeInput.value,\r\n            completed: false\r\n        };\r\n        tasks.push(task);\r\n        taskInput.value = '';\r\n        dateInput.value = '';\r\n        timeInput.value = '';\r\n        renderTasks();\r\n    }\r\n}\r\n\r\nfunction renderTasks(filter = 'all') {\r\n    const taskList = document.getElementById('taskList');\r\n    taskList.innerHTML = '';\r\n\r\n    const filteredTasks = tasks.filter(task => {\r\n        if (filter === 'all') return true;\r\n        if (filter === 'pending') return !task.completed;\r\n        if (filter === 'completed') return task.completed;\r\n    });\r\n\r\n    filteredTasks.forEach(task => {\r\n        const li = document.createElement('li');\r\n        li.className = task.completed ? 'completed' : '';\r\n        li.innerHTML = `\r\n            <span>${task.text}</span>\r\n            <span>${task.date} ${task.time}</span>\r\n            <div>\r\n                <button class=\"edit\" onclick=\"editTask(${task.id})\">Edit</button>\r\n                <button class=\"complete\" onclick=\"toggleComplete(${task.id})\">${task.completed ? 'Undo' : 'Complete'}</button>\r\n                <button onclick=\"deleteTask(${task.id})\">Delete</button>\r\n            </div>\r\n        `;\r\n        taskList.appendChild(li);\r\n    });\r\n}\r\n\r\nfunction editTask(id) {\r\n    const task = tasks.find(task => task.id === id);\r\n    const newText = prompt('Edit your task:', task.text);\r\n    const newDate = prompt('Edit the date:', task.date);\r\n    const newTime = prompt('Edit the time:', task.time);\r\n\r\n    if (newText && newDate && newTime) {\r\n        tasks = tasks.map(task => task.id === id ? { ...task, text: newText, date: newDate, time: newTime } : task);\r\n        renderTasks();\r\n    }\r\n}\r\n\r\nfunction toggleComplete(id) {\r\n    tasks = tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task);\r\n    renderTasks();\r\n}\r\n\r\nfunction deleteTask(id) {\r\n    tasks = tasks.filter(task => task.id !== id);\r\n    renderTasks();\r\n}\r\n\r\nfunction filterTasks(filter) {\r\n    renderTasks(filter);\r\n}\r\n\r\n// Call promptUser to start the interaction\r\npromptUser();\r\n"]}